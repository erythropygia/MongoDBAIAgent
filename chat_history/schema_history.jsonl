[{"role": "system", "content": "Sen **sadece Türkçe konuşan ve düşünen**, MongoDB ve Python profesörü bir yapay zeka modelisin.\n\n**‼️ DİKKAT: Kullanıcı yalnızca veri okuma işlemleri yapabilir.**\n❌ Kullanıcının isteği ne olursa olsun **veri silme (`delete`), güncelleme (`update`) veya ekleme (`insert`) işlemlerini** kesinlikle gerçekleştirme.\n❌ Eğer kullanıcı böyle bir komut verirse, açık bir şekilde **\"Bunu yapamam çünkü yalnızca okuma işlemlerine izin veriliyor.\"** şeklinde yanıt ver.\n\nKullanıcı sana veri tabanındaki datalarla çeşitli işlemler gerçekleştirmen için sorular soracak.\n\nHer istekte aşağıdaki formatta cevap ver ve </answer> kısmından sonra **asla** bir şey yazma:\n<think>\nBuraya, soruyu çözerken düşündüğün mantıklı adımları yaz. Her adımda neyi neden yapacağını belirt.\n</think>\n\n<answer>\nBurada ise soruya net ve doğru bir python kodu oluştur. **Ancak sadece okuma (`find`, `aggregate`) işlemleri yapabilirsin.** Silme (`delete`), güncelleme (`update`) veya ekleme (`insert`) işlemleri içeren kodlar yazmamalısın.\n</answer>\n", "model_type": 0}, {"role": "user", "content": "**kullanıcıların telefon numarası bilgisine ihtiyacım var** işlemini gerçekleştirmek için gerekli olan db name ve collection bilgilerini <think>...</think> arasında adım adım düşünerek mesajın sonundaki şemadan yola çıkarak analiz et:\n<answer></answer> kısmında **sadece tek bir**  JSON listesi dön ve </answer> kısmından sonra **asla** bir şey yazma. **Sorguyla ilişkilendirdiğin** tüm db name ve collection bilgilerini yukarıdaki şemayı dikkate alarak listeye ekle, gereksizleri **ekleme**. \nHer bir db name ve collection için aşağıdaki örnek cevaptaki alanları doldur:\n\nÖrnek cevap:\n<think>\n...\n</think>\n<answer>\n```json\n[\n  {\n    \"DBName\": \"db_name1\",\n    \"Collection\": \"collection_name1\",\n    \"Enums\": \"enums1\",\n    \"EnumsDescription\": \"enumsdescription1\",\n    \"Schema\": \"schema1\"\n  },\n  ...\n]\n```\n</answer>\n\nŞema ise aşağıdadır:\n[{'DBName': 'Emotion4U_UserDB', 'Collection': 'User', 'Enums': 'Role: Admin, Callback, User | IsEmailConfirmed: true, false', 'EnumsDescription': 'Role: Kullanıcının sistemdeki yetki düzeyini belirtir. Admin yöneticileri, Callback sistemin dış servisler için oluşturduğu özel hesapları, User ise standart kullanıcıları ifade eder. | IsEmailConfirmed: Kullanıcının emailini onaylayıp onaylamadığını ifade eder. true ise onaylı, false ise onaysız email demektir.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'FullName': 'str', 'Email': 'str', 'PhoneNumber': 'str', 'Password': 'str', 'LastTokens': 'list', 'Role': 'str', 'IsEmailConfirmed': 'bool'}}, {'DBName': 'Emotion4U_NotificationDB', 'Collection': 'NotificationRequests', 'Enums': 'EventType: ForgotPassword, Register | NotificationType: Email, Sms', 'EnumsDescription': 'EventType: Bildirimlerin hangi olay sonucunda tetiklendiğini gösterir. Örneğin, ForgotPassword şifre sıfırlama işlemini, Register ise yeni kullanıcı kaydını ifade eder. | NotificationType: Bildirimlerin hangi iletişim kanalıyla gönderildiğini belirtir. Email e-posta ile, Sms ise kısa mesaj ile gönderildiğini gösterir.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'PhoneNumber': 'str', 'Content': 'str', 'EventType': 'str', 'NotificationType': 'str', 'Status': 'str'}}]\n", "model_type": 0}, {"role": "assistant", "content": "<think>\nŞema ile verilen bilgileri dikkate alarak, kullanıcıların telefon numarası bilgisine ulaşmak için gerekli olan db ve collection bilgilerini belirlemem gerekiyor. Şema ve örnekteki gibi \"PhoneNumber\" anahtarının varlığına göre, bu bilgi \"User\" collectioninde saklanıyor olabilir.\n\nŞema:\n- DBName: Emotion4U_UserDB\n- Collection: User\n- Enums: Role, IsEmailConfirmed\n- EnumsDescription: Role ve IsEmailConfirmed açıklamaları\n- Schema: _id, CreatedAt, FullName, Email, PhoneNumber, Password, LastTokens, Role, IsEmailConfirmed\n\nBu bilgilere dayanarak, sorgu ile ilgili gerekli bilgiyi listeye eklemem gerekiyor.\n</think>\n\n<answer>\n```json\n[\n  {\n    \"DBName\": \"Emotion4U_UserDB\",\n    \"Collection\": \"User\",\n    \"Enums\": \"Role: Admin, Callback, User | IsEmailConfirmed: true, false\",\n    \"EnumsDescription\": \"Role: Kullanıcının sistemdeki yetki düzeyini belirtir. Admin yöneticileri, Callback sistemin dış servisler için oluşturduğu özel hesapları, User ise standart kullanıcıları ifade eder. | IsEmailConfirmed: Kullanıcının emailini onaylayıp onaylamadığını ifade eder. true ise onaylı, false ise onaysız email demektir.\",\n    \"Schema\": {\n      \"_id\": \"ObjectId\",\n      \"CreatedAt\": \"datetime\",\n      \"FullName\": \"str\",\n      \"Email\": \"str\",\n      \"PhoneNumber\": \"str\",\n      \"Password\": \"str\",\n      \"LastTokens\": \"list\",\n      \"Role\": \"str\",\n      \"IsEmailConfirmed\": \"bool\"\n    }\n  }\n]\n```\n</answer>", "model_type": 0}]
[{"role": "user", "content": "**kullanıcıların telefon numaralarına ihtiyacım var** işlemini gerçekleştirmek için gerekli olan db name ve collection bilgilerini <think>...</think> arasında adım adım düşünerek mesajın sonundaki şemadan yola çıkarak analiz et:\n<answer></answer> kısmında **sadece tek bir**  JSON listesi dön ve </answer> kısmından sonra **asla** bir şey yazma. **Sorguyla ilişkilendirdiğin** tüm db name ve collection bilgilerini yukarıdaki şemayı dikkate alarak listeye ekle, gereksizleri **ekleme**. \nHer bir db name ve collection için aşağıdaki örnek cevaptaki alanları doldur:\n\nÖrnek cevap:\n<think>\n...\n</think>\n<answer>\n```json\n[\n  {\n    \"DBName\": \"db_name1\",\n    \"Collection\": \"collection_name1\",\n    \"Enums\": \"enums1\",\n    \"EnumsDescription\": \"enumsdescription1\",\n    \"Schema\": \"schema1\"\n  },\n  ...\n]\n```\n</answer>\n\nŞema ise aşağıdadır:\n[{'DBName': 'Emotion4U_UserDB', 'Collection': 'User', 'Enums': 'Role: Admin, Callback, User | IsEmailConfirmed: true, false', 'EnumsDescription': 'Role: Kullanıcının sistemdeki yetki düzeyini belirtir. Admin yöneticileri, Callback sistemin dış servisler için oluşturduğu özel hesapları, User ise standart kullanıcıları ifade eder. | IsEmailConfirmed: Kullanıcının emailini onaylayıp onaylamadığını ifade eder. true ise onaylı, false ise onaysız email demektir.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'FullName': 'str', 'Email': 'str', 'PhoneNumber': 'str', 'Password': 'str', 'LastTokens': 'list', 'Role': 'str', 'IsEmailConfirmed': 'bool'}}]\n", "model_type": 2}, {"role": "assistant", "content": "<think>\n```json\n[\n  {\n    \"DBName\": \"Emotion4U_UserDB\",\n    \"Collection\": \"User\",\n    \"Enums\": {\n      \"Role\": [\n        \"Admin\",\n        \"Callback\",\n        \"User\"\n      ],\n      \"IsEmailConfirmed\": \"bool\"\n    },\n    \"EnumsDescription\": \"Role: Kullanıcının sistemdeki yetki düzeyini belirtir. Admin yöneticileri, Callback sistemin dış servisler için oluşturduğu özel hesapları, User ise standart kullanıcıları ifade eder.\",\n    \"Schema\": {\n      \"_id\": \"ObjectId\",\n      \"CreatedAt\": \"datetime\",\n      \"FullName\": \"str\",\n      \"Email\": \"str\",\n      \"PhoneNumber\": \"str\",\n      \"Password\": \"str\",\n      \"LastTokens\": \"list\",\n      \"Role\": \"str\",\n      \"IsEmailConfirmed\": \"bool\"\n    }\n  }\n]\n```\n</think>", "model_type": 2}]
[{"role": "user", "content": "**(kullanıcıların fullname ve telefon numarası bilgisini getir)** sorgusunu gerçekleştirmek için gerekli olan db name ve collection bilgilerini aşağıdaki şemadan seç ve istenen formatta cevap ver:\n\n[{'DBName': 'Emotion4U_UserDB', 'Collection': 'User', 'Enums': 'Role: Admin, Callback, User | IsEmailConfirmed: true, false', 'EnumsDescription': 'Role: Kullanıcının sistemdeki yetki düzeyini belirtir. Admin yöneticileri, Callback sistemin dış servisler için oluşturduğu özel hesapları, User ise standart kullanıcıları ifade eder. | IsEmailConfirmed: Kullanıcının emailini onaylayıp onaylamadığını ifade eder. true ise onaylı, false ise onaysız email demektir.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'FullName': 'str', 'Email': 'str', 'PhoneNumber': 'str', 'Password': 'str', 'LastTokens': 'list', 'Role': 'str', 'IsEmailConfirmed': 'bool'}}, {'DBName': 'Emotion4U_NotificationDB', 'Collection': 'NotificationRequests', 'Enums': 'EventType: ForgotPassword, Register | NotificationType: Email, Sms', 'EnumsDescription': 'EventType: Bildirimlerin hangi olay sonucunda tetiklendiğini gösterir. Örneğin, ForgotPassword şifre sıfırlama işlemini, Register ise yeni kullanıcı kaydını ifade eder. | NotificationType: Bildirimlerin hangi iletişim kanalıyla gönderildiğini belirtir. Email e-posta ile, Sms ise kısa mesaj ile gönderildiğini gösterir.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'PhoneNumber': 'str', 'Content': 'str', 'EventType': 'str', 'NotificationType': 'str', 'Status': 'str'}}]\n\n**‼️ DİKKAT: Cevabın yalnızca aşağıdaki formatta JSON verisi içermesi ve kullanıcı sorgusuyla ilişkili tüm veritabanı bilgilerini eksiksiz kapsaması gerekmektedir. **\n```json\n[\n  {\n    \"DBName\": \"db_name1\",\n    \"Collection\": \"collection_name1\",\n    \"Enums\": \"enums1\",\n    \"EnumsDescription\": \"enumsdescription1\",\n    \"Schema\": \"schema1\"\n  },\n  ...\n]\n```\n", "model_type": 2}, {"role": "assistant", "content": "```json\n[\n  {\n    \"DBName\": \"Emotion4U_UserDB\",\n    \"Collection\": \"User\",\n    \"Enums\": \"Role: Admin, Callback, User | IsEmailConfirmed: true, false\",\n    \"EnumsDescription\": \"Role: Kullanıcının sistemdeki yetki düzeyini belirtir. Admin yöneticileri, Callback sistemin dış servisler için oluşturduğu özel hesapları, User ise standart kullanıcıları ifade eder. | IsEmailConfirmed: Kullanıcının emailini onaylayıp onaylamadığını ifade eder. true ise onaylı, false ise onaysız email demektir.\",\n    \"Schema\": {\n      \"_id\": \"ObjectId\",\n      \"CreatedAt\": \"datetime\",\n      \"FullName\": \"str\",\n      \"Email\": \"str\",\n      \"PhoneNumber\": \"str\",\n      \"Password\": \"str\",\n      \"LastTokens\": \"list\",\n      \"Role\": \"str\",\n      \"IsEmailConfirmed\": \"bool\"\n    }\n  }\n]\n```", "model_type": 2}]
[{"role": "user", "content": "**(en son abonelik satın alan kullanıcı kimdir?)** sorgusunu gerçekleştirmek için gerekli olan db name ve collection bilgilerini aşağıdaki şemadan seç ve istenen formatta cevap ver:\n\n[{'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'AdvertisementDataAnalyses', 'Enums': 'IsSuccessSent: true, false | IsComplete: true, false', 'EnumsDescription': 'IsSuccessSent: Kullanıcının yaptığı reklam analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsComplete: Kullanıcının yaptığı reklam analiz işleminin başarıyla tamamlanıp tamamlanmadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'DataSubject': 'str', 'Response': 'str', 'IsSuccessSent': 'bool', 'IsComplete': 'bool'}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'DataAnalyses', 'Enums': 'IsSuccessSent: true, false | IsDistilbertComplete: true, false | IsLLMComplete: true, false', 'EnumsDescription': \"IsSuccessSent: Kullanıcının yaptığı veri analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsDistilbertComplete: Kullanıcının yaptığı veri analiz işlemini distilbert modelinin başarıyla tamamlayıp tamamlamadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsLLMComplete: Kullanıcının yaptığı veri analiz işlemini LLM'in başarıyla tamamlayıp tamamlamadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.\", 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'DataInfo': 'str', 'Request': 'list', 'LLMResponse': {'type': 'dict', 'structure': {'Percentages': {'type': 'dict', 'structure': {'Sentiment': {'type': 'dict', 'structure': {'Positive': 'float', 'Negative': 'float'}}, 'Emotion': {'type': 'dict', 'structure': {'Love': 'float', 'Sadness': 'float', 'Joy': 'float', 'Anger': 'float', 'Fear': 'float', 'Surprise': 'float'}}, 'Offensive': {'type': 'dict', 'structure': {'NotOffensive': 'float', 'Offensive': 'float'}}, 'Comment': {'type': 'dict', 'structure': {'ProductComment': 'float', 'GeneralComment': 'float', 'StoreComment': 'float'}}}}, 'ModelPrompt': 'str'}}, 'DistilbertResponse': {'type': 'list', 'items': {'Text': 'str', 'Sentiment': {'type': 'dict', 'structure': {'Sentiment': 'str', 'Score': 'float'}}, 'Emotion': {'type': 'dict', 'structure': {'Emotion': 'str', 'Score': 'float'}}, 'Offensive': {'type': 'dict', 'structure': {'Offensive': 'str', 'Score': 'float'}}, 'Comment': {'type': 'dict', 'structure': {'Comment': 'str', 'Score': 'float'}}}}, 'IsSuccessSent': 'bool', 'IsDistilbertComplete': 'bool', 'IsLLMComplete': 'bool'}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'Subscriptions', 'Enums': 'Package: Free, Premium, Custom', 'EnumsDescription': 'Package: Kullanıcının sahip olduğu abonelik türü. Free ücretsiz planı, Premium daha fazla analiz hakkı sunan bir paketi ve Custom kullanıcıya özel belirlenen bir paketi ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'Package': 'str', 'UsedQuota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int', 'EvaluateAdvertisementDataQuota': 'int'}}, 'Quota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int', 'EvaluateAdvertisementDataQuota': 'int'}}}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'CVAnalyses', 'Enums': 'IsSuccessSent: true, false | IsComplete: true, false', 'EnumsDescription': 'IsSuccessSent: Kullanıcının yaptığı cv analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsComplete: Kullanıcının yaptığı cv analiz işleminin başarıyla tamamlanıp tamamlanmadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'HiringJob': 'str', 'CVResponse': 'str', 'IsSuccessSent': 'bool', 'IsComplete': 'bool'}}, {'DBName': 'Emotion4U_NotificationDB', 'Collection': 'NotificationRequests', 'Enums': 'EventType: ForgotPassword, Register | NotificationType: Email, Sms', 'EnumsDescription': 'EventType: Bildirimlerin hangi olay sonucunda tetiklendiğini gösterir. Örneğin, ForgotPassword şifre sıfırlama işlemini, Register ise yeni kullanıcı kaydını ifade eder. | NotificationType: Bildirimlerin hangi iletişim kanalıyla gönderildiğini belirtir. Email e-posta ile, Sms ise kısa mesaj ile gönderildiğini gösterir.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'PhoneNumber': 'str', 'Content': 'str', 'EventType': 'str', 'NotificationType': 'str', 'Status': 'str'}}]\n\n**‼️ DİKKAT: Cevabın yalnızca aşağıdaki formatta JSON verisi içermesi ve kullanıcı sorgusuyla ilişkili tüm veritabanı bilgilerini eksiksiz kapsaması gerekmektedir. **\n```json\n[\n  {\n    \"DBName\": \"db_name1\",\n    \"Collection\": \"collection_name1\",\n    \"Enums\": \"enums1\",\n    \"EnumsDescription\": \"enumsdescription1\",\n    \"Schema\": \"schema1\"\n  },\n  ...\n]\n```\n", "model_type": 2}, {"role": "assistant", "content": "```json\n[\n  {\n    \"DBName\": \"Emotion4U_EvaluationDB\",\n    \"Collection\": \"Subscriptions\",\n    \"Enums\": \"Package: Free, Premium, Custom\",\n    \"EnumsDescription\": \"Package: Kullanıcının sahip olduğu abonelik türü. Free ücretsiz planı, Premium daha fazla analiz hakkı sunan bir paketi ve Custom kullanıcıya özel belirlenen bir paketi ifade eder.\",\n    \"Schema\": {\n      \"_id\": \"ObjectId\",\n      \"CreatedAt\": \"datetime\",\n      \"Email\": \"str\",\n      \"Package\": \"str\",\n      \"UsedQuota\": {\n        \"type\": \"dict\",\n        \"structure\": {\n          \"EvaluateDataQuota\": \"int\",\n          \"EvaluateCVQuota\": \"int\",\n          \"EvaluateAdvertisementDataQuota\": \"int\"\n        }\n      },\n      \"Quota\": {\n        \"type\": \"dict\",\n        \"structure\": {\n          \"EvaluateDataQuota\": \"int\",\n          \"EvaluateCVQuota\": \"int\",\n          \"EvaluateAdvertisementDataQuota\": \"int\"\n        }\n      }\n    }\n  }\n]\n```", "model_type": 2}]
[{"role": "user", "content": "**(kullanıcıları getir)** sorgusunu gerçekleştirmek için gerekli olan db name ve collection bilgilerini aşağıdaki şemadan seç ve istenen formatta cevap ver:\n\n[{'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'AdvertisementDataAnalyses', 'Enums': 'IsSuccessSent: true, false | IsComplete: true, false', 'EnumsDescription': 'IsSuccessSent: Kullanıcının yaptığı reklam analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsComplete: Kullanıcının yaptığı reklam analiz işleminin başarıyla tamamlanıp tamamlanmadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'DataSubject': 'str', 'Response': 'str', 'IsSuccessSent': 'bool', 'IsComplete': 'bool'}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'DataAnalyses', 'Enums': 'IsSuccessSent: true, false | IsDistilbertComplete: true, false | IsLLMComplete: true, false', 'EnumsDescription': \"IsSuccessSent: Kullanıcının yaptığı veri analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsDistilbertComplete: Kullanıcının yaptığı veri analiz işlemini distilbert modelinin başarıyla tamamlayıp tamamlamadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsLLMComplete: Kullanıcının yaptığı veri analiz işlemini LLM'in başarıyla tamamlayıp tamamlamadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.\", 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'DataInfo': 'str', 'Request': 'list', 'LLMResponse': {'type': 'dict', 'structure': {'Percentages': {'type': 'dict', 'structure': {'Sentiment': {'type': 'dict', 'structure': {'Positive': 'float', 'Negative': 'float'}}, 'Emotion': {'type': 'dict', 'structure': {'Love': 'float', 'Sadness': 'float', 'Joy': 'float', 'Anger': 'float', 'Fear': 'float', 'Surprise': 'float'}}, 'Offensive': {'type': 'dict', 'structure': {'NotOffensive': 'float', 'Offensive': 'float'}}, 'Comment': {'type': 'dict', 'structure': {'ProductComment': 'float', 'GeneralComment': 'float', 'StoreComment': 'float'}}}}, 'ModelPrompt': 'str'}}, 'DistilbertResponse': {'type': 'list', 'items': {'Text': 'str', 'Sentiment': {'type': 'dict', 'structure': {'Sentiment': 'str', 'Score': 'float'}}, 'Emotion': {'type': 'dict', 'structure': {'Emotion': 'str', 'Score': 'float'}}, 'Offensive': {'type': 'dict', 'structure': {'Offensive': 'str', 'Score': 'float'}}, 'Comment': {'type': 'dict', 'structure': {'Comment': 'str', 'Score': 'float'}}}}, 'IsSuccessSent': 'bool', 'IsDistilbertComplete': 'bool', 'IsLLMComplete': 'bool'}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'Subscriptions', 'Enums': 'Package: Free, Premium, Custom', 'EnumsDescription': 'Package: Kullanıcının sahip olduğu abonelik türü. Free ücretsiz planı, Premium daha fazla analiz hakkı sunan bir paketi ve Custom kullanıcıya özel belirlenen bir paketi ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'Package': 'str', 'UsedQuota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int', 'EvaluateAdvertisementDataQuota': 'int'}}, 'Quota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int', 'EvaluateAdvertisementDataQuota': 'int'}}}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'CVAnalyses', 'Enums': 'IsSuccessSent: true, false | IsComplete: true, false', 'EnumsDescription': 'IsSuccessSent: Kullanıcının yaptığı cv analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsComplete: Kullanıcının yaptığı cv analiz işleminin başarıyla tamamlanıp tamamlanmadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'HiringJob': 'str', 'CVResponse': 'str', 'IsSuccessSent': 'bool', 'IsComplete': 'bool'}}, {'DBName': 'Emotion4U_NotificationDB', 'Collection': 'NotificationRequests', 'Enums': 'EventType: ForgotPassword, Register | NotificationType: Email, Sms', 'EnumsDescription': 'EventType: Bildirimlerin hangi olay sonucunda tetiklendiğini gösterir. Örneğin, ForgotPassword şifre sıfırlama işlemini, Register ise yeni kullanıcı kaydını ifade eder. | NotificationType: Bildirimlerin hangi iletişim kanalıyla gönderildiğini belirtir. Email e-posta ile, Sms ise kısa mesaj ile gönderildiğini gösterir.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'PhoneNumber': 'str', 'Content': 'str', 'EventType': 'str', 'NotificationType': 'str', 'Status': 'str'}}]\n\n**‼️ DİKKAT: Cevabın yalnızca aşağıdaki formatta JSON verisi içermesi ve kullanıcı sorgusuyla ilişkili tüm veritabanı bilgilerini eksiksiz kapsaması gerekmektedir. **\n```json\n[\n  {\n    \"DBName\": \"db_name1\",\n    \"Collection\": \"collection_name1\",\n    \"Enums\": \"enums1\",\n    \"EnumsDescription\": \"enumsdescription1\",\n    \"Schema\": \"schema1\"\n  },\n  ...\n]\n```\n", "model_type": 2}, {"role": "assistant", "content": "```json\n[\n  {\n    \"DBName\": \"Emotion4U_EvaluationDB\",\n    \"Collection\": \"AdvertisementDataAnalyses\",\n    \"Enums\": \"IsSuccessSent: true, false | IsComplete: true, false\",\n    \"EnumsDescription\": \"IsSuccessSent: Kullanıcının yaptığı reklam analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsComplete: Kullanıcının yaptığı reklam analiz işleminin başarıyla tamamlanıp tamamlanmadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.\",\n    \"Schema\": {\"_id\": \"ObjectId\", \"CreatedAt\": \"datetime\", \"Email\": \"str\", \"DataId\": \"str\", \"DataSubject\": \"str\", \"Response\": \"str\", \"IsSuccessSent\": \"bool\", \"IsComplete\": \"bool\"}\n  },\n  {\n    \"DBName\": \"Emotion4U_EvaluationDB\",\n    \"Collection\": \"DataAnalyses\",\n    \"Enums\": \"IsSuccessSent: true, false | IsDistilbertComplete: true, false | IsLLMComplete: true, false\",\n    \"EnumsDescription\": \"IsSuccessSent: Kullanıcının yaptığı veri analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsDistilbertComplete: Kullanıcının yaptığı veri analiz işlemini distilbert modelinin başarıyla tamamlayıp tamamlamadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsLLMComplete: Kullanıcının yaptığı veri analiz işlemini LLM'in başarıyla tamamlayıp tamamladığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.\",\n    \"Schema\": {\"_id\": \"ObjectId\", \"CreatedAt\": \"datetime\", \"Email\": \"str\", \"DataId\": \"str\", \"DataInfo\": \"str\", \"Request\": \"list\", \"LLMResponse\": {\"type\": \"dict\", \"structure\": {\"Percentages\": {\"type\": \"dict\", \"structure\": {\"Sentiment\": {\"type\": \"dict\", \"structure\": {\"Positive\": \"float\", \"Negative\": \"float\"}}, \"Emotion\": {\"type\": \"dict\", \"structure\": {\"Love\": \"float\", \"Sadness\": \"float\", \"Joy\": \"float\", \"Anger\": \"float\", \"Fear\": \"float\", \"Surprise\": \"float\"}}, \"Offensive\": {\"type\": \"dict\", \"structure\": {\"NotOffensive\": \"float\", \"Offensive\": \"float\"}}, \"Comment\": {\"type\": \"dict\", \"structure\": {\"ProductComment\": \"float\", \"GeneralComment\": \"float\", \"StoreComment\": \"float\"}}}}, \"ModelPrompt\": \"str\"}}, \"DistilbertResponse\": {\"type\": \"list\", \"items\": {\"Text\": \"str\", \"Sentiment\": {\"type\": \"dict\", \"structure\": {\"Sentiment\": \"str\", \"Score\": \"float\"}}, \"Emotion\": {\"type\": \"dict\", \"structure\": {\"Emotion\": \"str\", \"Score\": \"float\"}}, \"Offensive\": {\"type\": \"dict\", \"structure\": {\"Offensive\": \"str\", \"Score\": \"float\"}}, \"Comment\": {\"type\": \"dict\", \"structure\": {\"Comment\": \"str\", \"Score\": \"float\"}}}}, \"IsSuccessSent\": \"bool\", \"IsDistilbertComplete\": \"bool\", \"IsLLMComplete\": \"bool\"}\n  },\n  {\n    \"DBName\": \"Emotion4U_EvaluationDB\",\n    \"Collection\": \"Subscriptions\",\n    \"Enums\": \"Package: Free, Premium, Custom\",\n    \"EnumsDescription\": \"Package: Kullanıcının sahip olduğu abonelik türü. Free ücretsiz planı, Premium daha fazla analiz hakkı sunan bir paketi ve Custom kullanıcıya özel belirlenen bir paketi ifade eder.\",\n    \"Schema\": {\"_id\": \"ObjectId\", \"CreatedAt\": \"datetime\", \"Email\": \"str\", \"Package\": \"str\", \"UsedQuota\": {\"type\": \"dict\", \"structure\": {\"EvaluateDataQuota\": \"int\", \"EvaluateCVQuota\": \"int\", \"EvaluateAdvertisementDataQuota\": \"int\"}}, \"Quota\": {\"type\": \"dict\", \"structure\": {\"EvaluateDataQuota\": \"int\", \"EvaluateCVQuota\": \"int\", \"EvaluateAdvertisementDataQuota\": \"int\"}}}\n  },\n  {\n    \"DBName\": \"Emotion4U_EvaluationDB\",\n    \"Collection\": \"CVAnalyses\",\n    \"Enums\": \"IsSuccessSent: true, false | IsComplete: true, false\",\n    \"EnumsDescription\": \"IsSuccessSent: Kullanıcının yaptığı cv analizi isteğinin başarıyla gelip gelmediğini ifade eder.", "model_type": 2}]
[{"role": "system", "content": "Sen **sadece Türkçe konuşan ve düşünen**, MongoDB ve Python profesörü bir yapay zeka modelisin.\n\n**‼️ DİKKAT: Kullanıcı yalnızca veri okuma işlemleri yapabilir.**\n❌ Kullanıcının isteği ne olursa olsun **veri silme (`delete`), güncelleme (`update`) veya ekleme (`insert`) işlemlerini** kesinlikle gerçekleştirme.\n❌ Eğer kullanıcı böyle bir komut verirse, açık bir şekilde **\"Bunu yapamam çünkü yalnızca okuma işlemlerine izin veriliyor.\"** şeklinde yanıt ver.\n\nKullanıcı sana veri tabanındaki datalarla çeşitli işlemler gerçekleştirmen için sorular soracak.\n\nHer istekte aşağıdaki formatta cevap ver ve </answer> kısmından sonra **asla** bir şey yazma:\n<think>\nBuraya, soruyu çözerken düşündüğün mantıklı adımları yaz. Her adımda neyi neden yapacağını belirt.\n</think>\n\n<answer>\nBurada ise soruya net ve doğru bir python kodu oluştur. **Ancak sadece okuma (`find`, `aggregate`) işlemleri yapabilirsin.** Silme (`delete`), güncelleme (`update`) veya ekleme (`insert`) işlemleri içeren kodlar yazmamalısın.\n</answer>\n", "model_type": 0}, {"role": "user", "content": "**userları getir** işlemini gerçekleştirmek için gerekli olan db name ve collection bilgilerini <think>...</think> arasında adım adım düşünerek mesajın sonundaki şemadan yola çıkarak analiz et:\n<answer></answer> kısmında **sadece tek bir**  JSON listesi dön ve </answer> kısmından sonra **asla** bir şey yazma. **Sorguyla ilişkilendirdiğin** tüm db name ve collection bilgilerini yukarıdaki şemayı dikkate alarak listeye ekle, gereksizleri **ekleme**. \nHer bir db name ve collection için aşağıdaki örnek cevaptaki alanları doldur:\n\nÖrnek cevap:\n<think>\n...\n</think>\n<answer>\n```json\n[\n  {\n    \"DBName\": \"db_name1\",\n    \"Collection\": \"collection_name1\",\n    \"Enums\": \"enums1\",\n    \"EnumsDescription\": \"enumsdescription1\",\n    \"Schema\": \"schema1\"\n  },\n  ...\n]\n```\n</answer>\n\nŞema ise aşağıdadır:\n[{'DBName': 'Emotion4U_UserDB', 'Collection': 'User', 'Enums': 'Role: Admin, Callback, User | IsEmailConfirmed: true, false', 'EnumsDescription': 'Role: Kullanıcının sistemdeki yetki düzeyini belirtir. Admin yöneticileri, Callback sistemin dış servisler için oluşturduğu özel hesapları, User ise standart kullanıcıları ifade eder. | IsEmailConfirmed: Kullanıcının emailini onaylayıp onaylamadığını ifade eder. true ise onaylı, false ise onaysız email demektir.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'FullName': 'str', 'Email': 'str', 'PhoneNumber': 'str', 'Password': 'str', 'LastTokens': 'list', 'Role': 'str', 'IsEmailConfirmed': 'bool'}}, {'DBName': 'Emotion4U_NotificationDB', 'Collection': 'NotificationTemplates', 'Enums': 'EventType: ForgotPassword, Register | NotificationType: Email, Sms', 'EnumsDescription': 'EventType: Bildirim şablonlarının hangi olay için kullanılacağını belirtir. ForgotPassword, şifre sıfırlama işlemi için kullanılan şablonları ifade eder. | NotificationType: Şablonun hangi iletişim kanalında kullanılacağını belirler. Email şablonları e-posta bildirimleri için, Sms şablonları ise kısa mesajlar için kullanılır.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Subject': 'str', 'Template': 'str', 'NotificationType': 'str', 'EventType': 'str'}}, {'DBName': 'Emotion4U_PaymentDB', 'Collection': 'PaymentData', 'Enums': 'Package: Free, Premium, Custom | PaymentStatus: Success, Waiting, Failed', 'EnumsDescription': 'Package: Kullanıcının satın aldığı abonelik türünü gösterir. Free ücretsiz paketi, Premium gelişmiş özellikler sunan bir paketi, Custom ise kullanıcıya özel belirlenen bir paketi ifade eder. | PaymentStatus: Ödemenin durumunu belirtir. Success başarılı ödemeyi, Waiting bekleyen işlemi, Failed başarısız ödemeyi ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'PaymentId': 'str', 'Email': 'str', 'Package': 'str', 'Quota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int'}}, 'Price': 'float', 'Discount': 'int', 'AmountPaid': 'float', 'PaymentStatus': 'str'}}, {'DBName': 'Emotion4U_PaymentDB', 'Collection': 'PaymentPackages', 'Enums': 'Package: Free, Premium, Custom', 'EnumsDescription': 'Package: Sistem tarafından sunulan abonelik türlerini belirtir. Free ücretsiz paketi, Premium daha fazla özellik sunan bir paketi ve Custom kullanıcıya özel bir paketi ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Package': 'str', 'RecordStatus': 'str', 'Price': 'float', 'Discount': 'int', 'Quota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int', 'EvaluateAdvertisementDataQuota': 'int'}}}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'AdvertisementDataAnalyses', 'Enums': 'IsSuccessSent: true, false | IsComplete: true, false', 'EnumsDescription': 'IsSuccessSent: Kullanıcının yaptığı reklam analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsComplete: Kullanıcının yaptığı reklam analiz işleminin başarıyla tamamlanıp tamamlanmadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'DataSubject': 'str', 'Response': 'str', 'IsSuccessSent': 'bool', 'IsComplete': 'bool'}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'Subscriptions', 'Enums': 'Package: Free, Premium, Custom', 'EnumsDescription': 'Package: Kullanıcının sahip olduğu abonelik türü. Free ücretsiz planı, Premium daha fazla analiz hakkı sunan bir paketi ve Custom kullanıcıya özel belirlenen bir paketi ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'Package': 'str', 'UsedQuota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int', 'EvaluateAdvertisementDataQuota': 'int'}}, 'Quota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int', 'EvaluateAdvertisementDataQuota': 'int'}}}}, {'DBName': 'Emotion4U_NotificationDB', 'Collection': 'NotificationRequests', 'Enums': 'EventType: ForgotPassword, Register | NotificationType: Email, Sms', 'EnumsDescription': 'EventType: Bildirimlerin hangi olay sonucunda tetiklendiğini gösterir. Örneğin, ForgotPassword şifre sıfırlama işlemini, Register ise yeni kullanıcı kaydını ifade eder. | NotificationType: Bildirimlerin hangi iletişim kanalıyla gönderildiğini belirtir. Email e-posta ile, Sms ise kısa mesaj ile gönderildiğini gösterir.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'PhoneNumber': 'str', 'Content': 'str', 'EventType': 'str', 'NotificationType': 'str', 'Status': 'str'}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'CVComparisons', 'Enums': 'IsSuccessSent: true, false | IsComplete: true, false', 'EnumsDescription': 'IsSuccessSent: Kullanıcının yaptığı cv karşılaştırma isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsComplete: Kullanıcının yaptığı cv karşılaştırma  işleminin başarıyla tamamlanıp tamamlanmadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'DataCount': 'int', 'HiringJob': 'str', 'HiringDetail': 'list', 'HiringResponse': 'list', 'IsSuccessSent': 'bool', 'IsComplete': 'bool'}}]\n", "model_type": 0}, {"role": "assistant", "content": "<think>\n从给定的模式来看，需要获取用户信息。根据提供的模式，用户的集合是 \"User\"，数据库名称是 \"Emotion4U_UserDB\"。\n\n因此，我们需要构建一个包含这两个字段的JSON对象。\n</think>\n\n<answer>\n```json\n[\n  {\n    \"DBName\": \"Emotion4U_UserDB\",\n    \"Collection\": \"User\"\n  }\n]\n```\n</answer>", "model_type": 0}]
[{"role": "system", "content": "Sen sadece Türkçe konuşan ve düşünen, MongoDB ve Python'da usta bir yapay zeka modelisin.\nKullanıcının isteklerini gerçekleştirecek python kodları üret.\n**Ancak sadece okuma (`find`, `aggregate`) ve veri görselleştirme ve kaydetme işlemleri yapabilirsin.** Silme (`delete`), güncelleme (`update`) veya ekleme (`insert`) işlemleri içeren kodlar yazmamalısın.\n", "model_type": 1}, {"role": "user", "content": "**(kullanıcıları getir)** sorgusunu gerçekleştirmek için gerekli olan db name ve collection bilgilerini aşağıdaki şemadan seç ve istenen formatta cevap ver:\n\n[{'DBName': 'Emotion4U_NotificationDB', 'Collection': 'NotificationTemplates', 'Enums': 'EventType: ForgotPassword, Register | NotificationType: Email, Sms', 'EnumsDescription': 'EventType: Bildirim şablonlarının hangi olay için kullanılacağını belirtir. ForgotPassword, şifre sıfırlama işlemi için kullanılan şablonları ifade eder. | NotificationType: Şablonun hangi iletişim kanalında kullanılacağını belirler. Email şablonları e-posta bildirimleri için, Sms şablonları ise kısa mesajlar için kullanılır.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Subject': 'str', 'Template': 'str', 'NotificationType': 'str', 'EventType': 'str'}}, {'DBName': 'Emotion4U_PaymentDB', 'Collection': 'PaymentData', 'Enums': 'Package: Free, Premium, Custom | PaymentStatus: Success, Waiting, Failed', 'EnumsDescription': 'Package: Kullanıcının satın aldığı abonelik türünü gösterir. Free ücretsiz paketi, Premium gelişmiş özellikler sunan bir paketi, Custom ise kullanıcıya özel belirlenen bir paketi ifade eder. | PaymentStatus: Ödemenin durumunu belirtir. Success başarılı ödemeyi, Waiting bekleyen işlemi, Failed başarısız ödemeyi ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'PaymentId': 'str', 'Email': 'str', 'Package': 'str', 'Quota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int'}}, 'Price': 'float', 'Discount': 'int', 'AmountPaid': 'float', 'PaymentStatus': 'str'}}, {'DBName': 'Emotion4U_PaymentDB', 'Collection': 'PaymentPackages', 'Enums': 'Package: Free, Premium, Custom', 'EnumsDescription': 'Package: Sistem tarafından sunulan abonelik türlerini belirtir. Free ücretsiz paketi, Premium daha fazla özellik sunan bir paketi ve Custom kullanıcıya özel bir paketi ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Package': 'str', 'RecordStatus': 'str', 'Price': 'float', 'Discount': 'int', 'Quota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int', 'EvaluateAdvertisementDataQuota': 'int'}}}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'Subscriptions', 'Enums': 'Package: Free, Premium, Custom', 'EnumsDescription': 'Package: Kullanıcının sahip olduğu abonelik türü. Free ücretsiz planı, Premium daha fazla analiz hakkı sunan bir paketi ve Custom kullanıcıya özel belirlenen bir paketi ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'Package': 'str', 'UsedQuota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int', 'EvaluateAdvertisementDataQuota': 'int'}}, 'Quota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int', 'EvaluateAdvertisementDataQuota': 'int'}}}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'CVComparisons', 'Enums': 'IsSuccessSent: true, false | IsComplete: true, false', 'EnumsDescription': 'IsSuccessSent: Kullanıcının yaptığı cv karşılaştırma isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsComplete: Kullanıcının yaptığı cv karşılaştırma  işleminin başarıyla tamamlanıp tamamlanmadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'DataCount': 'int', 'HiringJob': 'str', 'HiringDetail': 'list', 'HiringResponse': 'list', 'IsSuccessSent': 'bool', 'IsComplete': 'bool'}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'CVAnalyses', 'Enums': 'IsSuccessSent: true, false | IsComplete: true, false', 'EnumsDescription': 'IsSuccessSent: Kullanıcının yaptığı cv analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsComplete: Kullanıcının yaptığı cv analiz işleminin başarıyla tamamlanıp tamamlanmadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'HiringJob': 'str', 'CVResponse': 'str', 'IsSuccessSent': 'bool', 'IsComplete': 'bool'}}, {'DBName': 'Emotion4U_UserDB', 'Collection': 'UserVerificationTokens', 'Enums': 'None', 'EnumsDescription': None, 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'Token': 'str', 'ExpiresAt': 'int', 'IsTokenUsed': 'bool'}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'DataAnalyses', 'Enums': 'IsSuccessSent: true, false | IsDistilbertComplete: true, false | IsLLMComplete: true, false', 'EnumsDescription': \"IsSuccessSent: Kullanıcının yaptığı veri analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsDistilbertComplete: Kullanıcının yaptığı veri analiz işlemini distilbert modelinin başarıyla tamamlayıp tamamlamadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsLLMComplete: Kullanıcının yaptığı veri analiz işlemini LLM'in başarıyla tamamlayıp tamamlamadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.\", 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'DataInfo': 'str', 'Request': 'list', 'LLMResponse': {'type': 'dict', 'structure': {'Percentages': {'type': 'dict', 'structure': {'Sentiment': {'type': 'dict', 'structure': {'Positive': 'float', 'Negative': 'float'}}, 'Emotion': {'type': 'dict', 'structure': {'Love': 'float', 'Sadness': 'float', 'Joy': 'float', 'Anger': 'float', 'Fear': 'float', 'Surprise': 'float'}}, 'Offensive': {'type': 'dict', 'structure': {'NotOffensive': 'float', 'Offensive': 'float'}}, 'Comment': {'type': 'dict', 'structure': {'ProductComment': 'float', 'GeneralComment': 'float', 'StoreComment': 'float'}}}}, 'ModelPrompt': 'str'}}, 'DistilbertResponse': {'type': 'list', 'items': {'Text': 'str', 'Sentiment': {'type': 'dict', 'structure': {'Sentiment': 'str', 'Score': 'float'}}, 'Emotion': {'type': 'dict', 'structure': {'Emotion': 'str', 'Score': 'float'}}, 'Offensive': {'type': 'dict', 'structure': {'Offensive': 'str', 'Score': 'float'}}, 'Comment': {'type': 'dict', 'structure': {'Comment': 'str', 'Score': 'float'}}}}, 'IsSuccessSent': 'bool', 'IsDistilbertComplete': 'bool', 'IsLLMComplete': 'bool'}}, {'DBName': 'Emotion4U_NotificationDB', 'Collection': 'NotificationRequests', 'Enums': 'EventType: ForgotPassword, Register | NotificationType: Email, Sms', 'EnumsDescription': 'EventType: Bildirimlerin hangi olay sonucunda tetiklendiğini gösterir. Örneğin, ForgotPassword şifre sıfırlama işlemini, Register ise yeni kullanıcı kaydını ifade eder. | NotificationType: Bildirimlerin hangi iletişim kanalıyla gönderildiğini belirtir. Email e-posta ile, Sms ise kısa mesaj ile gönderildiğini gösterir.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'PhoneNumber': 'str', 'Content': 'str', 'EventType': 'str', 'NotificationType': 'str', 'Status': 'str'}}]\n\n**‼️ DİKKAT: Cevabın yalnızca aşağıdaki formatta JSON verisi içermesi ve kullanıcı sorgusuyla ilişkili tüm veritabanı bilgilerini eksiksiz kapsaması gerekmektedir. **\n```json\n[\n  {\n    \"DBName\": \"db_name1\",\n    \"Collection\": \"collection_name1\",\n    \"Enums\": \"enums1\",\n    \"EnumsDescription\": \"enumsdescription1\",\n    \"Schema\": \"schema1\"\n  },\n  ...\n]\n```\n", "model_type": 1}, {"role": "assistant", "content": "```json\n[\n  {\n    \"DBName\": \"Emotion4U_UserDB\",\n    \"Collection\": \"UserVerificationTokens\",\n    \"Enums\": \"None\",\n    \"EnumsDescription\": null,\n    \"Schema\": {\n      \"_id\": \"ObjectId\",\n      \"CreatedAt\": \"datetime\",\n      \"Email\": \"str\",\n      \"Token\": \"str\",\n      \"ExpiresAt\": \"int\",\n      \"IsTokenUsed\": \"bool\"\n    }\n  }\n]\n```\n", "model_type": 1}]
[{"role": "system", "content": "Sen **sadece Türkçe konuşan ve düşünen**, MongoDB ve Python profesörü bir yapay zeka modelisin.\n\n**‼️ DİKKAT: Kullanıcı yalnızca veri okuma işlemleri yapabilir.**\n❌ Kullanıcının isteği ne olursa olsun **veri silme (`delete`), güncelleme (`update`) veya ekleme (`insert`) işlemlerini** kesinlikle gerçekleştirme.\n❌ Eğer kullanıcı böyle bir komut verirse, açık bir şekilde **\"Bunu yapamam çünkü yalnızca okuma işlemlerine izin veriliyor.\"** şeklinde yanıt ver.\n\nKullanıcı sana veri tabanındaki datalarla çeşitli işlemler gerçekleştirmen için sorular soracak.\n\nHer istekte aşağıdaki formatta cevap ver ve </answer> kısmından sonra **asla** bir şey yazma:\n<think>\nBuraya, soruyu çözerken düşündüğün mantıklı adımları yaz. Her adımda neyi neden yapacağını belirt.\n</think>\n\n<answer>\nBurada ise soruya net ve doğru bir python kodu oluştur. **Ancak sadece okuma (`find`, `aggregate`) işlemleri yapabilirsin.** Silme (`delete`), güncelleme (`update`) veya ekleme (`insert`) işlemleri içeren kodlar yazmamalısın.\n</answer>\n", "model_type": 0}, {"role": "user", "content": "**en son abonelik satın almış kullanıcıyı getirir misin?** işlemini gerçekleştirmek için gerekli olan db name ve collection bilgilerini <think>...</think> arasında adım adım düşünerek mesajın sonundaki şemadan yola çıkarak analiz et:\n<answer></answer> kısmında **sadece tek bir**  JSON listesi dön ve </answer> kısmından sonra **asla** bir şey yazma. **Sorguyla ilişkilendirdiğin** tüm db name ve collection bilgilerini yukarıdaki şemayı dikkate alarak listeye ekle, gereksizleri **ekleme**. \nHer bir db name ve collection için aşağıdaki örnek cevaptaki alanları doldur:\n\nÖrnek cevap:\n<think>\n...\n</think>\n<answer>\n```json\n[\n  {\n    \"DBName\": \"db_name1\",\n    \"Collection\": \"collection_name1\",\n    \"Enums\": \"enums1\",\n    \"EnumsDescription\": \"enumsdescription1\",\n    \"Schema\": \"schema1\"\n  },\n  ...\n]\n```\n</answer>\n\nŞema ise aşağıdadır:\n[{'DBName': 'Emotion4U_NotificationDB', 'Collection': 'NotificationTemplates', 'Enums': 'EventType: ForgotPassword, Register | NotificationType: Email, Sms', 'EnumsDescription': 'EventType: Bildirim şablonlarının hangi olay için kullanılacağını belirtir. ForgotPassword, şifre sıfırlama işlemi için kullanılan şablonları ifade eder. | NotificationType: Şablonun hangi iletişim kanalında kullanılacağını belirler. Email şablonları e-posta bildirimleri için, Sms şablonları ise kısa mesajlar için kullanılır.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Subject': 'str', 'Template': 'str', 'NotificationType': 'str', 'EventType': 'str'}}, {'DBName': 'Emotion4U_PaymentDB', 'Collection': 'PaymentData', 'Enums': 'Package: Free, Premium, Custom | PaymentStatus: Success, Waiting, Failed', 'EnumsDescription': 'Package: Kullanıcının satın aldığı abonelik türünü gösterir. Free ücretsiz paketi, Premium gelişmiş özellikler sunan bir paketi, Custom ise kullanıcıya özel belirlenen bir paketi ifade eder. | PaymentStatus: Ödemenin durumunu belirtir. Success başarılı ödemeyi, Waiting bekleyen işlemi, Failed başarısız ödemeyi ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'PaymentId': 'str', 'Email': 'str', 'Package': 'str', 'Quota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int'}}, 'Price': 'float', 'Discount': 'int', 'AmountPaid': 'float', 'PaymentStatus': 'str'}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'AdvertisementDataAnalyses', 'Enums': 'IsSuccessSent: true, false | IsComplete: true, false', 'EnumsDescription': 'IsSuccessSent: Kullanıcının yaptığı reklam analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsComplete: Kullanıcının yaptığı reklam analiz işleminin başarıyla tamamlanıp tamamlanmadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'DataSubject': 'str', 'Response': 'str', 'IsSuccessSent': 'bool', 'IsComplete': 'bool'}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'CVAnalyses', 'Enums': 'IsSuccessSent: true, false | IsComplete: true, false', 'EnumsDescription': 'IsSuccessSent: Kullanıcının yaptığı cv analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsComplete: Kullanıcının yaptığı cv analiz işleminin başarıyla tamamlanıp tamamlanmadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'HiringJob': 'str', 'CVResponse': 'str', 'IsSuccessSent': 'bool', 'IsComplete': 'bool'}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'DataAnalyses', 'Enums': 'IsSuccessSent: true, false | IsDistilbertComplete: true, false | IsLLMComplete: true, false', 'EnumsDescription': \"IsSuccessSent: Kullanıcının yaptığı veri analizi isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsDistilbertComplete: Kullanıcının yaptığı veri analiz işlemini distilbert modelinin başarıyla tamamlayıp tamamlamadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsLLMComplete: Kullanıcının yaptığı veri analiz işlemini LLM'in başarıyla tamamlayıp tamamlamadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.\", 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'DataInfo': 'str', 'Request': 'list', 'LLMResponse': {'type': 'dict', 'structure': {'Percentages': {'type': 'dict', 'structure': {'Sentiment': {'type': 'dict', 'structure': {'Positive': 'float', 'Negative': 'float'}}, 'Emotion': {'type': 'dict', 'structure': {'Love': 'float', 'Sadness': 'float', 'Joy': 'float', 'Anger': 'float', 'Fear': 'float', 'Surprise': 'float'}}, 'Offensive': {'type': 'dict', 'structure': {'NotOffensive': 'float', 'Offensive': 'float'}}, 'Comment': {'type': 'dict', 'structure': {'ProductComment': 'float', 'GeneralComment': 'float', 'StoreComment': 'float'}}}}, 'ModelPrompt': 'str'}}, 'DistilbertResponse': {'type': 'list', 'items': {'Text': 'str', 'Sentiment': {'type': 'dict', 'structure': {'Sentiment': 'str', 'Score': 'float'}}, 'Emotion': {'type': 'dict', 'structure': {'Emotion': 'str', 'Score': 'float'}}, 'Offensive': {'type': 'dict', 'structure': {'Offensive': 'str', 'Score': 'float'}}, 'Comment': {'type': 'dict', 'structure': {'Comment': 'str', 'Score': 'float'}}}}, 'IsSuccessSent': 'bool', 'IsDistilbertComplete': 'bool', 'IsLLMComplete': 'bool'}}, {'DBName': 'Emotion4U_PaymentDB', 'Collection': 'PaymentPackages', 'Enums': 'Package: Free, Premium, Custom', 'EnumsDescription': 'Package: Sistem tarafından sunulan abonelik türlerini belirtir. Free ücretsiz paketi, Premium daha fazla özellik sunan bir paketi ve Custom kullanıcıya özel bir paketi ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Package': 'str', 'RecordStatus': 'str', 'Price': 'float', 'Discount': 'int', 'Quota': {'type': 'dict', 'structure': {'EvaluateDataQuota': 'int', 'EvaluateCVQuota': 'int', 'EvaluateAdvertisementDataQuota': 'int'}}}}, {'DBName': 'Emotion4U_EvaluationDB', 'Collection': 'CVComparisons', 'Enums': 'IsSuccessSent: true, false | IsComplete: true, false', 'EnumsDescription': 'IsSuccessSent: Kullanıcının yaptığı cv karşılaştırma isteğinin başarıyla gelip gelmediğini ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder. | IsComplete: Kullanıcının yaptığı cv karşılaştırma  işleminin başarıyla tamamlanıp tamamlanmadığını ifade eder. true işlemin başarılı olduğunu false olmadığını ifade eder.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'DataId': 'str', 'DataCount': 'int', 'HiringJob': 'str', 'HiringDetail': 'list', 'HiringResponse': 'list', 'IsSuccessSent': 'bool', 'IsComplete': 'bool'}}]\n", "model_type": 0}, {"role": "assistant", "content": "<think>\nBu istek, en son abonelik satın almış kullanıcıyı getirmemizi gerektiriyor. Bu nedenle, abonelik ile ilgili bilgi sağlayan koleksiyon ve veritabanı adını bulmam gerekiyor. Verilen şema içinde bu bilgilere sahip bir koleksiyon varsa bunu kullanabiliriz.\n\nVerilen şemada `Emotion4U_PaymentDB` adlı bir veritabanı vardır ve bu veritabanında `PaymentData` collection'ı var. `PaymentData` collection'inde `Package` alanına sahip olduğumuzdan, abonelik satın alma bilgileri burada saklanabilir.\n\nBöylece sorguyu oluşturmak için:\n- DBName: Emotion4U_PaymentDB\n- Collection: PaymentData\n- Enums: Package: Free, Premium, Custom\n- EnumsDescription: Kullanıcı aboneliği alıp almamını belirten paket bilgilerini ifade eder.\n- Schema: Bu collection'ın yapılandırmasını kullanabiliriz.\n\n`Package` alanına sahip olduğumuzdan, en son satılan abonelikleri bulmak için `Package` ve `CreatedAt` alanlarını sorgulayarak en yeni kayıtları bulabiliriz. Ancak bu istekte `en son abonelik satın almış kullanıcıyı` getirmemizi istiyor.\n\nEn son abonelik satın almış kullanıcıyı bulmak için, `Package` alanına sahip ve `CreatedAt` değerine göre sıralanmış (en yeni olanlar) bir sorgu oluşturmamız yeterli olacaktır. Bu sorguyu `find` ile yapabiliriz.\n</think>\n<answer>\n```json\n[\n  {\n    \"DBName\": \"Emotion4U_PaymentDB\",\n    \"Collection\": \"PaymentData\",\n    \"Enums\": \"Package: Free, Premium, Custom\",\n    \"EnumsDescription\": \"Paket: Kullanıcının satın aldığı abonelik türünü belirtir. Free ücretsiz paketi, Premium gelişmiş özellikler sunan bir paketi, Custom kullanıcıya özel belirlenen bir paketi ifade eder.\",\n    \"Schema\": {\"_id\": \"ObjectId\", \"CreatedAt\": \"datetime\", \"Email\": \"str\", \"Package\": \"str\", \"Quota\": {\"type\": \"dict\", \"structure\": {\"EvaluateDataQuota\": \"int\", \"EvaluateCVQuota\": \"int\"}}, \"Price\": \"float\", \"Discount\": \"int\", \"AmountPaid\": \"float\", \"PaymentStatus\": \"str\"}\n  }\n]\n```\n</answer>", "model_type": 0}]
