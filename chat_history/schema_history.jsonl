[{"role": "system", "content": "Sen **sadece Türkçe konuşan ve düşünen**, MongoDB ve Python profesörü bir yapay zeka modelisin.\n\n**‼️ DİKKAT: Kullanıcı yalnızca veri okuma işlemleri yapabilir.**\n❌ Kullanıcının isteği ne olursa olsun **veri silme (`delete`), güncelleme (`update`) veya ekleme (`insert`) işlemlerini** kesinlikle gerçekleştirme.\n❌ Eğer kullanıcı böyle bir komut verirse, açık bir şekilde **\"Bunu yapamam çünkü yalnızca okuma işlemlerine izin veriliyor.\"** şeklinde yanıt ver.\n\nKullanıcı sana veri tabanındaki datalarla çeşitli işlemler gerçekleştirmen için sorular soracak.\n\nHer istekte aşağıdaki formatta cevap ver ve </answer> kısmından sonra **asla** bir şey yazma:\n<think>\nBuraya, soruyu çözerken düşündüğün mantıklı adımları yaz. Her adımda neyi neden yapacağını belirt.\n</think>\n\n<answer>\nBurada ise soruya net ve doğru bir python kodu oluştur. **Ancak sadece okuma (`find`, `aggregate`) işlemleri yapabilirsin.** Silme (`delete`), güncelleme (`update`) veya ekleme (`insert`) işlemleri içeren kodlar yazmamalısın.\n</answer>\n", "model_type": 0}, {"role": "user", "content": "**kullanıcıların telefon numarası bilgisine ihtiyacım var** işlemini gerçekleştirmek için gerekli olan db name ve collection bilgilerini <think>...</think> arasında adım adım düşünerek mesajın sonundaki şemadan yola çıkarak analiz et:\n<answer></answer> kısmında **sadece tek bir**  JSON listesi dön ve </answer> kısmından sonra **asla** bir şey yazma. **Sorguyla ilişkilendirdiğin** tüm db name ve collection bilgilerini yukarıdaki şemayı dikkate alarak listeye ekle, gereksizleri **ekleme**. \nHer bir db name ve collection için aşağıdaki örnek cevaptaki alanları doldur:\n\nÖrnek cevap:\n<think>\n...\n</think>\n<answer>\n```json\n[\n  {\n    \"DBName\": \"db_name1\",\n    \"Collection\": \"collection_name1\",\n    \"Enums\": \"enums1\",\n    \"EnumsDescription\": \"enumsdescription1\",\n    \"Schema\": \"schema1\"\n  },\n  ...\n]\n```\n</answer>\n\nŞema ise aşağıdadır:\n[{'DBName': 'Emotion4U_UserDB', 'Collection': 'User', 'Enums': 'Role: Admin, Callback, User | IsEmailConfirmed: true, false', 'EnumsDescription': 'Role: Kullanıcının sistemdeki yetki düzeyini belirtir. Admin yöneticileri, Callback sistemin dış servisler için oluşturduğu özel hesapları, User ise standart kullanıcıları ifade eder. | IsEmailConfirmed: Kullanıcının emailini onaylayıp onaylamadığını ifade eder. true ise onaylı, false ise onaysız email demektir.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'FullName': 'str', 'Email': 'str', 'PhoneNumber': 'str', 'Password': 'str', 'LastTokens': 'list', 'Role': 'str', 'IsEmailConfirmed': 'bool'}}, {'DBName': 'Emotion4U_NotificationDB', 'Collection': 'NotificationRequests', 'Enums': 'EventType: ForgotPassword, Register | NotificationType: Email, Sms', 'EnumsDescription': 'EventType: Bildirimlerin hangi olay sonucunda tetiklendiğini gösterir. Örneğin, ForgotPassword şifre sıfırlama işlemini, Register ise yeni kullanıcı kaydını ifade eder. | NotificationType: Bildirimlerin hangi iletişim kanalıyla gönderildiğini belirtir. Email e-posta ile, Sms ise kısa mesaj ile gönderildiğini gösterir.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'Email': 'str', 'PhoneNumber': 'str', 'Content': 'str', 'EventType': 'str', 'NotificationType': 'str', 'Status': 'str'}}]\n", "model_type": 0}, {"role": "assistant", "content": "<think>\nŞema ile verilen bilgileri dikkate alarak, kullanıcıların telefon numarası bilgisine ulaşmak için gerekli olan db ve collection bilgilerini belirlemem gerekiyor. Şema ve örnekteki gibi \"PhoneNumber\" anahtarının varlığına göre, bu bilgi \"User\" collectioninde saklanıyor olabilir.\n\nŞema:\n- DBName: Emotion4U_UserDB\n- Collection: User\n- Enums: Role, IsEmailConfirmed\n- EnumsDescription: Role ve IsEmailConfirmed açıklamaları\n- Schema: _id, CreatedAt, FullName, Email, PhoneNumber, Password, LastTokens, Role, IsEmailConfirmed\n\nBu bilgilere dayanarak, sorgu ile ilgili gerekli bilgiyi listeye eklemem gerekiyor.\n</think>\n\n<answer>\n```json\n[\n  {\n    \"DBName\": \"Emotion4U_UserDB\",\n    \"Collection\": \"User\",\n    \"Enums\": \"Role: Admin, Callback, User | IsEmailConfirmed: true, false\",\n    \"EnumsDescription\": \"Role: Kullanıcının sistemdeki yetki düzeyini belirtir. Admin yöneticileri, Callback sistemin dış servisler için oluşturduğu özel hesapları, User ise standart kullanıcıları ifade eder. | IsEmailConfirmed: Kullanıcının emailini onaylayıp onaylamadığını ifade eder. true ise onaylı, false ise onaysız email demektir.\",\n    \"Schema\": {\n      \"_id\": \"ObjectId\",\n      \"CreatedAt\": \"datetime\",\n      \"FullName\": \"str\",\n      \"Email\": \"str\",\n      \"PhoneNumber\": \"str\",\n      \"Password\": \"str\",\n      \"LastTokens\": \"list\",\n      \"Role\": \"str\",\n      \"IsEmailConfirmed\": \"bool\"\n    }\n  }\n]\n```\n</answer>", "model_type": 0}]
[{"role": "user", "content": "**kullanıcıların telefon numaralarına ihtiyacım var** işlemini gerçekleştirmek için gerekli olan db name ve collection bilgilerini <think>...</think> arasında adım adım düşünerek mesajın sonundaki şemadan yola çıkarak analiz et:\n<answer></answer> kısmında **sadece tek bir**  JSON listesi dön ve </answer> kısmından sonra **asla** bir şey yazma. **Sorguyla ilişkilendirdiğin** tüm db name ve collection bilgilerini yukarıdaki şemayı dikkate alarak listeye ekle, gereksizleri **ekleme**. \nHer bir db name ve collection için aşağıdaki örnek cevaptaki alanları doldur:\n\nÖrnek cevap:\n<think>\n...\n</think>\n<answer>\n```json\n[\n  {\n    \"DBName\": \"db_name1\",\n    \"Collection\": \"collection_name1\",\n    \"Enums\": \"enums1\",\n    \"EnumsDescription\": \"enumsdescription1\",\n    \"Schema\": \"schema1\"\n  },\n  ...\n]\n```\n</answer>\n\nŞema ise aşağıdadır:\n[{'DBName': 'Emotion4U_UserDB', 'Collection': 'User', 'Enums': 'Role: Admin, Callback, User | IsEmailConfirmed: true, false', 'EnumsDescription': 'Role: Kullanıcının sistemdeki yetki düzeyini belirtir. Admin yöneticileri, Callback sistemin dış servisler için oluşturduğu özel hesapları, User ise standart kullanıcıları ifade eder. | IsEmailConfirmed: Kullanıcının emailini onaylayıp onaylamadığını ifade eder. true ise onaylı, false ise onaysız email demektir.', 'Schema': {'_id': 'ObjectId', 'CreatedAt': 'datetime', 'FullName': 'str', 'Email': 'str', 'PhoneNumber': 'str', 'Password': 'str', 'LastTokens': 'list', 'Role': 'str', 'IsEmailConfirmed': 'bool'}}]\n", "model_type": 2}, {"role": "assistant", "content": "<think>\n```json\n[\n  {\n    \"DBName\": \"Emotion4U_UserDB\",\n    \"Collection\": \"User\",\n    \"Enums\": {\n      \"Role\": [\n        \"Admin\",\n        \"Callback\",\n        \"User\"\n      ],\n      \"IsEmailConfirmed\": \"bool\"\n    },\n    \"EnumsDescription\": \"Role: Kullanıcının sistemdeki yetki düzeyini belirtir. Admin yöneticileri, Callback sistemin dış servisler için oluşturduğu özel hesapları, User ise standart kullanıcıları ifade eder.\",\n    \"Schema\": {\n      \"_id\": \"ObjectId\",\n      \"CreatedAt\": \"datetime\",\n      \"FullName\": \"str\",\n      \"Email\": \"str\",\n      \"PhoneNumber\": \"str\",\n      \"Password\": \"str\",\n      \"LastTokens\": \"list\",\n      \"Role\": \"str\",\n      \"IsEmailConfirmed\": \"bool\"\n    }\n  }\n]\n```\n</think>", "model_type": 2}]
